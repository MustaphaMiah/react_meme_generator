{"version":3,"sources":["images/Trollface.png","Header.js","MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","headerImage","alt","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","className","onSubmit","type","placeholder","onChange","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAAe,G,MAAA,IAA0B,uC,OCY1BA,MATf,WACE,OACE,mCACE,qBAAKC,IAAKC,EAAaC,IAAI,eAC3B,mD,0CC4DSC,E,kDAhEb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATR,E,qDAYd,WAAqB,IAAD,OAClBE,MAAM,qCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAAc,IACXE,EAAUF,EAASG,KAAnBD,MACR,EAAKE,SAAS,CAAEV,YAAaQ,S,0BAInC,SAAaG,GAAQ,IAAD,EACMA,EAAMC,OAAtBC,EADU,EACVA,KAAMC,EADI,EACJA,MACdC,KAAKL,SAAL,eAAiBG,EAAOC,M,0BAG1B,SAAaH,GACXA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,YAAYqB,QAC5DC,EAAcP,KAAKnB,MAAMI,YAAYiB,GAASM,IACpDR,KAAKL,SAAS,CAAEX,UAAWuB,M,oBAG7B,WACE,OACE,gCACE,uBAAME,UAAU,YAAYC,SAAUV,KAAKZ,aAA3C,UACE,uBACEuB,KAAK,OACLb,KAAK,UACLc,YAAY,WACZb,MAAOC,KAAKnB,MAAMC,QAClB+B,SAAUb,KAAKd,eAEjB,uBACEyB,KAAK,OACLb,KAAK,aACLc,YAAY,cACZb,MAAOC,KAAKnB,MAAME,WAClB8B,SAAUb,KAAKd,eAGjB,4CAEF,sBAAKuB,UAAU,OAAf,UACE,qBAAKhC,IAAKuB,KAAKnB,MAAMG,UAAWL,IAAI,KACpC,oBAAI8B,UAAU,MAAd,SAAqBT,KAAKnB,MAAMC,UAChC,oBAAI2B,UAAU,SAAd,SAAwBT,KAAKnB,MAAME,uB,GA1DjB+B,aCWbC,MATf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.db948346.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Trollface.c371feba.png\";","import React from \"react\";\nimport headerImage from \"./images/Trollface.png\";\n\nfunction Header() {\n  return (\n    <header>\n      <img src={headerImage} alt=\"Troll Face\" />\n      <p>Meme Generator</p>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass MemeGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((response) => response.json())\n      .then((response) => {\n        const { memes } = response.data;\n        this.setState({ allMemeImgs: memes });\n      });\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\n    const randMemeImg = this.state.allMemeImgs[randNum].url;\n    this.setState({ randomImg: randMemeImg });\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"topText\"\n            placeholder=\"Top Text\"\n            value={this.state.topText}\n            onChange={this.handleChange}\n          />\n          <input\n            type=\"text\"\n            name=\"bottomText\"\n            placeholder=\"Bottom Text\"\n            value={this.state.bottomText}\n            onChange={this.handleChange}\n          />\n\n          <button>Gen</button>\n        </form>\n        <div className=\"meme\">\n          <img src={this.state.randomImg} alt=\"\" />\n          <h2 className=\"top\">{this.state.topText}</h2>\n          <h2 className=\"bottom\">{this.state.bottomText}</h2>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MemeGenerator;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport MemeGenerator from \"./MemeGenerator\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}